*import logging  -> biblioteca básica

*Log levels:
DEBUG
INFO
WARNING
ERROR
CRITICAL
logging.debug('This is a debug message')
logging.info('This is an info message')
logging.warning('This is a warning message')
logging.error('This is an error message')
logging.critical('This is a critical message')

*Configuración
basicConfig() -> sólo se puede llamar una vez por programa, logging.debug, etc lo llaman implicitamente. El default es imprimir en consola a partir de nivel warning
keywords:
level: The root logger will be set to the specified severity level. los que estén igual o abajo no se logean en archivo
filename: This specifies the file.
filemode: If filename is given, the file is opened in this mode. The default is a, which means append.
format: This is the format of the log message.

*Log a archivo
logging.basicConfig(filename='app.log', filemode='w', format='%(name)s - %(levelname)s - %(message)s')


*Formato
logging.basicConfig(format='%(asctime)s - %(message)s', level=logging.INFO)
logging.basicConfig(format='%(asctime)s - %(message)s', datefmt='%d-%b-%y %H:%M:%S')

*f-strings
name = 'John'
logging.error(f'{name} raised an error')

*Stacktraces
try:
  c = a / b
except Exception as e:
  logging.error("Exception occurred", exc_info=True)

# Otra forma de hacer lo mismo
try:
  c = a / b
except Exception as e:
  logging.exception("Exception occurred")

